TASK 02

#include <stdio.h>
#include <omp.h>

int main()
{
    int n,i;
    float s;
    double t1,t2;
    scanf("%d",&n);
    printf("Without OMP\n\n");
    t1=omp_get_wtime();
    s=0;
	
    for(i=1;i<=n;i++)
    {
        s+=(float)(1/i);
    }
    t2=omp_get_wtime();
    printf("Sum = %f\n",s);
    printf("%g\n",t2-t1);
    printf("With OMP\n\n");
    t1=omp_get_wtime();
    #pragma omp parallel for private(i,s,n)
    for(i=1;i<=n;i++)
    {
        s+=(float)(1/i);
    }
    t2=omp_get_wtime(); 
    printf("Sum = %f\n",s); 
    printf("%g\n",t2-t1);
    return 0;
} 


TASK 03

#include <stdlib.h>
#include <time.h>
#include <omp.h>

int main()
{
    double t1,t2;
    const int n=12,m=12;
    int a[n][m],b[n][m],c[n][m];
    srand(time(NULL));
    printf("Without OMP\n\n");
    t1=omp_get_wtime();

    for (int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            a[i][j] = rand() % 100;
            b[i][j] = rand() % 200;
        }
    }

    for (int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            c[i][j] = a[i][j] + b[i][j];
            printf("c[%d][%d] = %d\n",i,j,c[i][j]);
        }
    }

    t2=omp_get_wtime();
    printf("%g\n",t2-t1);
    srand(time(NULL));
    omp_set_num_threads(3);
    printf("With OMP\n\n");
    t1=omp_get_wtime();
    #pragma omp parallel for schedule(static)

    for (int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {

            a[i][j] = rand() % 100;
            b[i][j] = rand() % 200;
        }
    }
    omp_set_num_threads(4);
    #pragma omp parallel for schedule(dynamic, 2)
    for (int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            c[i][j] = a[i][j] + b[i][j];
            printf("c[%d][%d] = %d\n",i,j,c[i][j]);
        }
    }
    t2=omp_get_wtime();
    printf("%g\n",t2-t1);
    return 0;

}



